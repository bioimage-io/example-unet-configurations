name: UNet2DNucleiBroad
description: A 2d U-Net pretrained on broad nucleus dataset.
cite:
    - text: "Ronneberger, Olaf et al. U-net: Convolutional networks for biomedical image segmentation. MICCAI 2015."
      doi: https://doi.org/10.1007/978-3-319-24574-4_28
authors:
    - Constantin Pape;@bioimage-io
documentation: ../unet2d.md
tags: [unet2d, pytorch, nucleus-segmentation]

format_version: 0.1.0
language: python
framework: pytorch

source: torchbio.models.unet.UNet2d
optional_kwargs: {input_channels: 1, output_channels: 1}

test_input: ../test_input.npy
test_output: ../test_output.npy
thumbnail: ./nuclei_thumbnail.png

# TODO double check inputs/outputs
inputs:
  - name: input
    axes: bcyx
    data_type: float32
    data_range: [-inf, inf]
    shape:
        min: [1, 1, 32, 32]
        step: [null, 0, 32, 32]
outputs:
  - name: output
    axes: bcyx
    data_type: float32
    data_range: [0, 1]
    shape:
        reference_input: input
        scale: [1, 1, 1, 1]
        offset: [0, 0, 0, 0]
        halo: [0, 0, 32, 32]

prediction:
    preprocess:
        - spec: https://github.com/bioimage-io/pytorch-bioimage-io/blob/master/specs/transformations/NormalizeZeroMeanUnitVariance.transformation.yaml
          kwargs: {apply_to: [0]}
    weights:
        source: todo.doi
        hash: {md5: TODO}
    postprocess: null
    dependencies: conda:../environment.yaml

training:
    setup:
        reader:
            spec: https://github.com/bioimage-io/python-bioimage-io/blob/master/specs/readers/BroadNucleusData.reader.yaml
        sampler:
            spec: https://github.com/bioimage-io/pytorch-bioimage-io/blob/master/specs/samplers/GrayscaleImageSampler.sampler.yaml
        preprocess:
            - spec: https://github.com/bioimage-io/pytorch-bioimage-io/blob/master/specs/transformations/NormalizeZeroMeanUnitVariance.transformation.yaml
              kwargs: {apply_to: [0]}
        loss:
            - spec: https://github.com/bioimage-io/pytorch-bioimage-io/blob/master/specs/transformations/Sigmoid.transformation.yaml
              kwargs: {apply_to: [0]}
            - spec: https://github.com/bioimage-io/pytorch-bioimage-io/blob/master/specs/transformations/BCELoss.transformation.yaml
        optimizer:
            source: torch.optim.Adam
            optional_kwargs: {lr: 0.002}
        # validation:
        #   - {}
    # The source for train can either be local, like this
    # source: ./train.py:train_unet2d_nuclei_broad
    # or come from some library in the dependencies, like this
    source: torchbio.training.simple_training
    optional_kwargs: {n_iterations: 25}
    # enable different ways of specifying the dependencies.
    # this would hold all training dependencies, e.g. as a frozen conda environment
    # or as a pom.xml
    dependencies: # this is a file to the dependencies
        conda:../environment.yaml
    description: "Train the unet via binary cross entropy"
